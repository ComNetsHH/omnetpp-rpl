[General]
network = RplNetwork

**.numNodes = ${numNodes = 5, 10, 20}
repeat = 10

num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2

**.hasIpv6 = true
**.hasIpv4 = false
**.mtu = 1500B

**.neighbourDiscovery.raEnabled = false # Router Advertisements are not handled by RPL currently
**.neighbourDiscovery.addRandomDelays = true # To avoid infinite loops during runtime
# Avoid Duplicate Address Detection as it spawns a handful of redundnant messaging and doesn't cooperate with RPL currently
**.neighbourDiscovery.skipDad = true

# PHY
**.radioMedium.typename = "Ieee802154NarrowbandDimensionalRadioMedium"
**.radio.typename = "Ieee802154NarrowbandDimensionalRadio"

# MAC
**.wlan[*].typename = "Ieee802154NarrowbandInterface"
**.wlan[*].mac.typename = "Ieee802154Mac"

# RPL config
**.sink[*].rpl.isRoot = true
**.sink[*].rpl.storing = true
**.rpl.numDaoRetransmitAttempts = 10
**.rpl.daoEnabled = true
**.rpl.poisoning = false
**.rpl.useBackupAsPreferred = false
**.rpl.networkProtocolModule = "^.ipv6.ipv6"
**.rpl.routingTableModule = "^.ipv6.routingTable"
**.rpl.drawConnectors = true # show connection to the preferred parent visually

# mobility and nodes' locations (for a single sink scenario)
**.sink[0].**.initialX = 150m
**.sink[0].**.initialY = 75m
**.host[0].**.initialX = 83m 
**.host[0].**.initialY = 180m
**.host[1].**.initialX = 220m 
**.host[1].**.initialY = 180m
**.host[2].**.initialX = 80m 
**.host[2].**.initialY = 306m
**.host[3].**.initialX = 270m 
**.host[3].**.initialY = 306m
**.host[4].**.initialX = 220m 
**.host[4].**.initialY = 430m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxX = 350m
**.mobility.constraintAreaMaxY = 600m 
**.mobility.initFromDisplayString = false

# nic settings
**.wlan[*].bitrate = 2Mbps

[Config _StaticTopology]
**.rpl.unreachabilityDetectionEnabled = false
**.host[*].mobility.typename = "StationaryMobility"
**.sink[*].mobility.typename = "StationaryMobility"
**.displayCommunicationRange = true

[Config _MobileSink]
**.sink[*].mobility.typename = "LinearMobility"
**.host[*].mobility.typename = "StationaryMobility"
**.sink[*].**.speed = 4mps
**.sink[*].**.initialMovementHeading = 0deg

[Config _DynamicTopology]
**.rpl.unreachabilityDetectionEnabled = true
**.rpl.poisoning = true

**.wlan[*].radio.typename = "UnitDiskRadio"
**.radioMedium.typename = "UnitDiskRadioMedium"
**.wlan[*].typename = "AckingWirelessInterface"
**.host[*].**.radio.transmitter.communicationRange = 150m
**.sink[*].**.radio.transmitter.communicationRange = 200m
**.host[*].**.radio.transmitter.displayCommunicationRange = true
**.sink[*].**.radio.transmitter.displayCommunicationRange = true
**.host[*].**.radio.receiver.ignoreInterference = true
**.sink[*].**.radio.receiver.ignoreInterference = true


**.host[1].mobility.typename = "LinearMobility"
**.host[*].mobility.typename = "StationaryMobility"
**.sink.mobility.typename = "StationaryMobility"
**.host[1].**.speed = 2mps
**.host[1].**.initialMovementHeading = 0deg
**.sink[*].**.displayCommunicationRange = true
**.host[1].**.displayCommunicationRange = true

# Multipoint-to-point communication
[Config _MP2P]
**.host[*].numApps = 1
**.host[*].app[0].typename = "UdpBasicApp"
**.host[*].app[0].localPort = -1
**.host[*].app[0].sendInterval = uniform(1s, 10s)
**.host[*].app[0].startTime = uniform(10s, 20s)
**.host[*].app[0].messageLength = 56B
**.host[*].app[0].destPort = 1000

**.sink[*].numApps = 1
**.sink[*].app[0].typename = "UdpSink"
**.sink[*].app[0].localPort = 1000

# Point-to-multipoint communication
[Config _P2MP]
**.forwarding = true
**.sink[*].numApps = 1
**.sink[*].app[0].typename = "UdpBasicApp"
**.sink[*].app[0].localPort = -1
**.sink[*].app[0].sendInterval = uniform(3s, 5s)
**.sink[*].app[0].startTime = uniform(15s, 20s)
**.sink[*].app[0].messageLength = 56B
**.sink[*].app[0].destAddresses = moduleListByPath("**.host*")
**.sink[*].app[0].destPort = 1000

**.host[*].numApps = 1
**.host[*].app[0].typename = "UdpSink"
**.host[*].app[0].localPort = 1000

# Point-to-point communication
[Config _P2P]
**.host[0].numApps = 1
**.host[0].app[0].typename = "UdpBasicApp"
**.host[0].app[0].sendInterval = uniform(5s, 10s)
**.host[0].app[0].startTime = uniform(20s, 30s)
**.host[0].app[0].messageLength = 56B
# dynamically assign last host as the dest address
**.host[0].app[0].destAddresses = "host[" + string(${numNodes} - parentIndex() - 1) + "]"
**.host[0].app[0].destPort = 1000

# here host index has to match the dest address set above for host[0]
**.host[4].numApps = 1
**.host[4].app[0].typename = "UdpSink"
**.host[4].app[0].localPort = 1000
**.host[4].app[0].startTime = 20s # should start before/when the sending application does

[Config MP2P-Static]
extends = _MP2P, _StaticTopology
description = multipoint-to-point communication under static topology

[Config MP2P-Dynamic]
extends = _MP2P, _DynamicTopology
description = multipoint-to-point communication with dynamic topology changes

[Config Poisoning]
extends = _MP2P, _DynamicTopology
**.host[1].rpl.poisoning = true
description = Sub-dodag poisoning example scenario

[Config P2MP-Static]
extends = _P2MP, _StaticTopology
description = point-to-multipoint communication under static topology

[Config P2MP-Dynamic]
extends = _P2MP, _DynamicTopology
description = point-to-multipoint communication with dynamic topology changes

[Config P2P-Static]
extends = _P2P, _StaticTopology
**.forwarding = true
description = point-to-point communication under static topology

#[Config ForwardingError]
#extends = P2MP-Dynamic
#**.host5.rpl.disabled = false
#**.sink.app[0].destAddresses = moduleListByPath("**.host5")
#description = Dynamic scenario representing forwarding error

[Config Wei-Te_Test]
extends = MP2P-Static

**.rpl.startDelay = 2

*.host[0].numEthInterfaces = 1
*.sink[*].numEthInterfaces = 1

*.host[0].rpl.scheduleEthernetPkt = true









